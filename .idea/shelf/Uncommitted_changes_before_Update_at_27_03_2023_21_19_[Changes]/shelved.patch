Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.epolsoftbackend.entities;\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.Pattern;\nimport java.util.Set;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"topic\")\npublic class Topic implements Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(name = \"id\", nullable = false)\n    private long id;\n\n    @Column(name = \"name\", nullable = false)\n    @Pattern(regexp = \"^[a-zA-zа-яА-Я]{4,100}$\")\n    private String name;\n\n    @OneToMany(mappedBy = \"topicId\")\n    private Set<Book> book;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java
--- a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java	(revision 77cd3743823d75b0d71c6f713c29b03356040c02)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java	(date 1679932511850)
@@ -18,6 +18,10 @@
 @Table(name = "topic")
 public class Topic implements Serializable{
 
+    public Topic( String name) {
+        this.name = name;
+    }
+
     @Id
     @GeneratedValue(strategy = GenerationType.SEQUENCE)
     @Column(name = "id", nullable = false)
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.epolsoftbackend.controllers;\n\nimport com.example.epolsoftbackend.services.LibraryService;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.http.ResponseEntity;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@RestController\npublic class LibraryController {\n    @Autowired\n    LibraryService LibraryService;\n\n    public LibraryController(LibraryService LibraryService) {\n        this.LibraryService = LibraryService;\n    }\n    \n    @PostMapping(\"/uploadFile\")\n    @ResponseStatus(HttpStatus.OK)\n    public void uploadFile(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        LibraryService.storeFile(file);\n    }\n    \n    @PostMapping(\"/deleteFile\")\n    @ResponseStatus(HttpStatus.OK)\n    public void deleteFile(@RequestParam(\"fileName\") String fileName) throws IOException {\n        LibraryService.deleteFile(fileName);\n    }\n    \n    @GetMapping(\"/downloadFile/{fileName:.+}\")\n    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request) throws MalformedURLException {\n        // Load file as Resource\n        Resource resource = LibraryService.loadFileAsResource(fileName);\n\n        // Try to determine file's content type\n        String contentType = null;\n        try {\n            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());\n        } catch (IOException ex) {\n            //logger.info(\"Could not determine file type.\");\n        }\n\n        // Fallback to the default content type if type could not be determined\n        if(contentType == null) {\n            contentType = \"application/octet-stream\";\n        }\n\n        return ResponseEntity.ok()\n                .contentType(MediaType.parseMediaType(contentType))\n                .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + resource.getFilename() + \"\\\"\")\n                .body(resource);\n    }\n\n\n\n\n\n    //результат со всеми книгами\n    @GetMapping\n    public String getAllBooks(){\n        return \"asd\";\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java
--- a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java	(revision 77cd3743823d75b0d71c6f713c29b03356040c02)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java	(date 1679941047457)
@@ -2,20 +2,13 @@
 
 import com.example.epolsoftbackend.services.LibraryService;
 import java.io.IOException;
-import java.net.MalformedURLException;
-
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.core.io.Resource;
-import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.*;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
-import org.springframework.http.ResponseEntity;
-
-import javax.servlet.http.HttpServletRequest;
 
 @RestController
 public class LibraryController {
@@ -25,51 +18,16 @@
     public LibraryController(LibraryService LibraryService) {
         this.LibraryService = LibraryService;
     }
-    
+
     @PostMapping("/uploadFile")
     @ResponseStatus(HttpStatus.OK)
     public void uploadFile(@RequestParam("file") MultipartFile file) throws IOException {
         LibraryService.storeFile(file);
     }
-    
+
     @PostMapping("/deleteFile")
     @ResponseStatus(HttpStatus.OK)
     public void deleteFile(@RequestParam("fileName") String fileName) throws IOException {
         LibraryService.deleteFile(fileName);
     }
-    
-    @GetMapping("/downloadFile/{fileName:.+}")
-    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request) throws MalformedURLException {
-        // Load file as Resource
-        Resource resource = LibraryService.loadFileAsResource(fileName);
-
-        // Try to determine file's content type
-        String contentType = null;
-        try {
-            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
-        } catch (IOException ex) {
-            //logger.info("Could not determine file type.");
-        }
-
-        // Fallback to the default content type if type could not be determined
-        if(contentType == null) {
-            contentType = "application/octet-stream";
-        }
-
-        return ResponseEntity.ok()
-                .contentType(MediaType.parseMediaType(contentType))
-                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
-                .body(resource);
-    }
-
-
-
-
-
-    //результат со всеми книгами
-    @GetMapping
-    public String getAllBooks(){
-        return "asd";
-    }
-
-}
+}
\ No newline at end of file
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.epolsoftbackend.entities;\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.Pattern;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"client\")\npublic class User implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(name = \"id\", nullable = false)\n    private long id;\n\n    @Column(name = \"name\", nullable = false)\n    @Pattern(regexp = \"^[ a-zA-zа-яА-Я.]{5,100}$\")\n    private String name;\n\n    @OneToOne(mappedBy = \"userId\")\n    private Book book;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java
--- a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java	(revision 77cd3743823d75b0d71c6f713c29b03356040c02)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java	(date 1679932511840)
@@ -17,6 +17,10 @@
 @Table(name = "client")
 public class User implements Serializable {
 
+    public User(String name) {
+        this.name = name;
+    }
+
     @Id
     @GeneratedValue(strategy = GenerationType.SEQUENCE)
     @Column(name = "id", nullable = false)
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.epolsoftbackend.repositories;\n\nimport com.example.epolsoftbackend.entities.Book;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BookRepository extends JpaRepository<Book, Long> {\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java
--- a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java	(revision 77cd3743823d75b0d71c6f713c29b03356040c02)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java	(date 1679938055047)
@@ -1,10 +1,38 @@
 package com.example.epolsoftbackend.repositories;
 
 import com.example.epolsoftbackend.entities.Book;
+import com.example.epolsoftbackend.entities.Topic;
+import com.example.epolsoftbackend.entities.User;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.repository.EntityGraph;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
+import javax.transaction.Transactional;
+import java.math.BigDecimal;
+import java.util.List;
+
 @Repository
 public interface BookRepository extends JpaRepository<Book, Long> {
 
+    @Modifying
+    @Transactional
+    @Query(value = "UPDATE book SET name = ?1, topicId = ?2, userId = ?3, description = ?4," +
+                   "shortDescription = ?5, file = ?6  WHERE id = ?7", nativeQuery = true)
+    void updateById( String name, Topic topicId, User userId, String description, String shortDescription, String file, long id);
+
+    @EntityGraph(attributePaths = {"topic", "user"})
+    Page<Book> findAll(Pageable pageable);
+
+    List<Book> findAllByOrderByName();
+    List<Book> findAllByOrderByTopic();
+    List<Book> findAllByOrderByUser();
+    List<Book> findAllByOrderByDescription();
+    List<Book> findAllByOrderByShortDescription();
+    List<Book> findAllByOrderByUpdatedAt();
+    List<Book> findAllByOrderByCreatedAt();
+
 }
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.epolsoftbackend.entities;\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.Pattern;\nimport java.time.LocalDateTime;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"book\")\npublic class Book implements Serializable {\n    @Id\n    @Column(name = \"id\", nullable = false)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    private long id;\n\n    @Column(name = \"name\")\n    @Pattern(regexp = \"^[ a-zA-zа-яА-Я]{2,100}$\")\n    private String name;\n\n    @ManyToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = \"topic_id\", referencedColumnName = \"id\")\n    private Topic topicId;\n\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\n    private User userId;\n\n    @Column(name = \"description\")\n    @Pattern(regexp = \"^[ a-zA-zа-яА-Я]{0,100}$\")\n    private String description;\n\n    @Column(name = \"short_description\")\n    @Pattern(regexp = \"^[ a-zA-zа-яА-Я]{0,100}$\")\n    private String shortDescription;\n\n    @Column(name = \"file\")\n    private String file;\n\n    @UpdateTimestamp\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java
--- a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java	(revision 77cd3743823d75b0d71c6f713c29b03356040c02)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java	(date 1679938679529)
@@ -1,10 +1,8 @@
 package com.example.epolsoftbackend.entities;
 
 import java.io.Serializable;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
+
+import lombok.*;
 import org.hibernate.annotations.CreationTimestamp;
 import org.hibernate.annotations.UpdateTimestamp;
 
@@ -12,13 +10,26 @@
 import javax.validation.constraints.Pattern;
 import java.time.LocalDateTime;
 
+
 @Getter
 @Setter
+@Builder
 @NoArgsConstructor
 @AllArgsConstructor
 @Entity
 @Table(name = "book")
 public class Book implements Serializable {
+
+    public Book(Long id, String name, Topic topic, User user, String description, String shortDescription, String file) {
+        this.id = id;
+        this.name = name;
+        this.topic_id = topic;
+        this.user_id = user;
+        this.description = description;
+        this.shortDescription = shortDescription;
+        this.file = file;
+    }
+
     @Id
     @Column(name = "id", nullable = false)
     @GeneratedValue(strategy = GenerationType.SEQUENCE)
@@ -26,32 +37,33 @@
 
     @Column(name = "name")
     @Pattern(regexp = "^[ a-zA-zа-яА-Я]{2,100}$")
-    private String name;
+    @Getter @Setter private String name;
 
     @ManyToOne(cascade = CascadeType.ALL)
     @JoinColumn(name = "topic_id", referencedColumnName = "id")
-    private Topic topicId;
+    @Getter @Setter  private Topic topic_id;
 
     @OneToOne(cascade = CascadeType.ALL)
     @JoinColumn(name = "user_id", referencedColumnName = "id")
-    private User userId;
+    @Getter @Setter  private User user_id;
 
     @Column(name = "description")
     @Pattern(regexp = "^[ a-zA-zа-яА-Я]{0,100}$")
-    private String description;
+    @Getter @Setter  private String description;
 
     @Column(name = "short_description")
     @Pattern(regexp = "^[ a-zA-zа-яА-Я]{0,100}$")
-    private String shortDescription;
+    @Getter @Setter private String shortDescription;
 
     @Column(name = "file")
-    private String file;
+    @Getter @Setter private String file;
 
     @UpdateTimestamp
     @Column(name = "updated_at")
-    private LocalDateTime updatedAt;
+    @Getter @Setter private LocalDateTime updatedAt;
 
     @CreationTimestamp
     @Column(name = "created_at")
-    private LocalDateTime createdAt;
+    @Getter @Setter private LocalDateTime createdAt;
+
 }
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1679900455412)
+++ b/.idea/compiler.xml	(date 1679900455412)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+    </annotationProcessing>
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/BookService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/BookService.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/BookService.java
new file mode 100644
--- /dev/null	(date 1679939143072)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/BookService.java	(date 1679939143072)
@@ -0,0 +1,75 @@
+package com.example.epolsoftbackend.services;
+
+import com.example.epolsoftbackend.entities.Book;
+import com.example.epolsoftbackend.repositories.BookRepository;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.stereotype.Service;
+import payload.BookModel;
+
+import javax.persistence.EntityNotFoundException;
+import java.util.List;
+
+@Service
+
+public class BookService {
+
+        private final BookRepository repository;
+
+        public BookService(BookRepository repository) {
+            this.repository = repository;
+        }
+
+        public Book create(BookModel book) {
+            var bookToSave = Book.builder()
+                    .name(book.getName())
+                    .topic_id(book.getTopic_id())
+                    .user_id(book.getUser_id())
+                    .description(book.getDescription())
+                    .shortDescription(book.getShortDescription())
+                    .file(book.getFile())
+                    .build();
+
+            return repository.save(bookToSave);
+        }
+
+        public List<Book> getBooksSortedBy(String sortField) {
+        switch (sortField) {
+            case "name":
+                return repository.findAllByOrderByName();
+            case "topic_id":
+                return repository.findAllByOrderByTopic();
+            case "user_id":
+                return repository.findAllByOrderByUser();
+            case "description":
+                return repository.findAllByOrderByDescription();
+            case "short_description":
+                return repository.findAllByOrderByShortDescription();
+            case "updated_at":
+                return repository.findAllByOrderByUpdatedAt();
+            case "created_at":
+                return repository.findAllByOrderByCreatedAt();
+            default:
+                return repository.findAll();
+        }
+    }
+
+        public Page<Book> getBooks(int pageNumber, int pageSize) {
+            Pageable pageable = PageRequest.of(pageNumber, pageSize);
+            return repository.findAll(pageable);
+        }
+        public void updateOne(long id, BookModel book) {
+            if (repository.findById(id).isEmpty()) throw new EntityNotFoundException();
+            repository.updateById(book.getName(), book.getTopic_id(), book.getUser_id(),
+                    book.getDescription(), book.getShortDescription(), book.getFile(), id);
+        }
+
+        public void deleteById(long id) {
+            repository.deleteById(id);
+        }
+
+        public void deleteAll() {
+            repository.deleteAll();
+        }
+}
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1679900455438)
+++ b/.idea/gradle.xml	(date 1679900455438)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$/epolsoft-backend" />
+        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$/epolsoft-backend" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1679900455403)
+++ b/.idea/misc.xml	(date 1679900455403)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$/epolsoft-backend" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="20" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1679940282758)
+++ b/.idea/vcs.xml	(date 1679940282758)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1679940860643)
+++ b/.idea/workspace.xml	(date 1679940860643)
@@ -0,0 +1,169 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="f4de64e1-9bec-45bc-b248-3da1cedb92d3" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/.name" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/BookController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/BookService.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/payload/BookModel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/gradle/wrapper/gradle-wrapper.properties" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/gradle/wrapper/gradle-wrapper.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/gradlew" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/gradlew" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/gradlew.bat" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/gradlew.bat" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/settings.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/settings.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/EpolsoftBackendApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/EpolsoftBackendApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/LibraryController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Book.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/Topic.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/entities/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/BookRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/TopicRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/TopicRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/UserRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/repositories/UserRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/LibraryService.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/java/com/example/epolsoftbackend/services/LibraryService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/epolsoft-backend/src/test/java/com/example/epolsoftbackend/EpolsoftBackendApplicationTests.java" beforeDir="false" afterPath="$PROJECT_DIR$/epolsoft-backend/src/test/java/com/example/epolsoftbackend/EpolsoftBackendApplicationTests.java" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ExternalProjectsData">
+    <projectState path="$PROJECT_DIR$/epolsoft-backend">
+      <ProjectState />
+    </projectState>
+  </component>
+  <component name="ExternalProjectsManager">
+    <system id="GRADLE">
+      <state>
+        <task path="$PROJECT_DIR$/epolsoft-backend">
+          <activation />
+        </task>
+        <projects_view>
+          <tree_state>
+            <expand>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="epolsoft-backend" type="f1a62948:ProjectNode" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="epolsoft-backend" type="f1a62948:ProjectNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+              </path>
+            </expand>
+            <select />
+          </tree_state>
+        </projects_view>
+      </state>
+    </system>
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2NYx1QUTQX6U78CJkGYuijjCD3Y" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "last_opened_file_path": "C:/Users/User/Documents/GitHub/epolsoft-library",
+    "nodejs_package_manager_path": "npm",
+    "spring.configuration.checksum": "7c78f3317f6aa91c9961555fcefca68d"
+  }
+}]]></component>
+  <component name="RecentsManager">
+    <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="com.example.epolsoftbackend.entities" />
+      <recent name="payload" />
+    </key>
+  </component>
+  <component name="RunManager" selected="Gradle.Tests in 'epolsoft-backend'">
+    <configuration name="Tests in 'epolsoft-backend'" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
+      <ExternalSystemSettings>
+        <option name="executionName" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$/epolsoft-backend" />
+        <option name="externalSystemIdString" value="GRADLE" />
+        <option name="scriptParameters" value="" />
+        <option name="taskDescriptions">
+          <list />
+        </option>
+        <option name="taskNames">
+          <list>
+            <option value=":test" />
+          </list>
+        </option>
+        <option name="vmOptions" />
+      </ExternalSystemSettings>
+      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
+      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
+      <DebugAllEnabled>false</DebugAllEnabled>
+      <method v="2" />
+    </configuration>
+    <configuration name="EpolsoftBackendApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot">
+      <module name="epolsoft-backend.main" />
+      <option name="SPRING_BOOT_MAIN_CLASS" value="com.example.epolsoftbackend.EpolsoftBackendApplication" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Gradle.Tests in 'epolsoft-backend'" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="f4de64e1-9bec-45bc-b248-3da1cedb92d3" name="Changes" comment="" />
+      <created>1679854600625</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1679854600625</updated>
+      <workItem from="1679854602093" duration="7924000" />
+      <workItem from="1679900420142" duration="21269000" />
+      <workItem from="1679940243491" duration="611000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/BookController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/BookController.java b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/BookController.java
new file mode 100644
--- /dev/null	(date 1679937539360)
+++ b/epolsoft-backend/src/main/java/com/example/epolsoftbackend/controllers/BookController.java	(date 1679937539360)
@@ -0,0 +1,48 @@
+package com.example.epolsoftbackend.controllers;
+
+import com.example.epolsoftbackend.entities.Book;
+import com.example.epolsoftbackend.services.BookService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import payload.BookModel;
+
+import java.util.List;
+
+@RestController
+public class BookController {
+    @Autowired
+    BookService BookService;
+
+    public BookController(BookService BookService) {this.BookService = BookService;}
+
+    @PutMapping("/update/{id}")
+    @ResponseStatus(HttpStatus.OK)
+    public void updateOneBook(@PathVariable("id") int id, @RequestBody BookModel book) {
+        BookService.updateOne(id, book);
+    }
+
+    @GetMapping
+    public ResponseEntity<Page<Book>> getBooks(@RequestParam(defaultValue = "0") int page,
+                                               @RequestParam(defaultValue = "15") int size) {
+        Page<Book> books = BookService.getBooks(page, size);
+        return ResponseEntity.ok(books);
+    }
+
+    @GetMapping("/sortedBy")
+    public List<Book> getBooksSortedBy(@RequestParam("sortField") String sortField) {
+        return BookService.getBooksSortedBy(sortField);
+    }
+
+        @DeleteMapping("/{id}")
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    public void deleteOneBook(@PathVariable("id") int id) {
+        BookService.deleteById(id);
+    }
+
+    @DeleteMapping()
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    public void deleteAllBooks() { BookService.deleteAll(); }
+}
\ No newline at end of file
Index: epolsoft-backend/src/main/java/payload/BookModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/epolsoft-backend/src/main/java/payload/BookModel.java b/epolsoft-backend/src/main/java/payload/BookModel.java
new file mode 100644
--- /dev/null	(date 1679938515936)
+++ b/epolsoft-backend/src/main/java/payload/BookModel.java	(date 1679938515936)
@@ -0,0 +1,19 @@
+package payload;
+
+import lombok.Getter;
+import com.example.epolsoftbackend.entities.Topic;
+import com.example.epolsoftbackend.entities.User;
+import org.springframework.stereotype.Component;
+
+@Getter
+@Component
+public class BookModel {
+ private String name;
+ private Topic topic_id;
+ private User user_id;
+ private String description;
+ private String shortDescription;
+private String file;
+
+
+}
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1679900454959)
+++ b/.idea/.name	(date 1679900454959)
@@ -0,0 +1,1 @@
+epolsoft-backend
\ No newline at end of file
